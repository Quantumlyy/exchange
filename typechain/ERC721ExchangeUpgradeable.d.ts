/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ERC721ExchangeUpgradeableInterface extends ethers.utils.Interface {
  functions: {
    "__ERC721Exchange_init(uint256,uint256,address)": FunctionFragment;
    "acceptBuyOrder(address,address,uint256,uint256,uint256)": FunctionFragment;
    "buyOrderExists(address,address,uint256)": FunctionFragment;
    "cancelBuyOrder(address,uint256)": FunctionFragment;
    "cancelSellOrder(address,uint256)": FunctionFragment;
    "createBuyOrder(address,address,uint256,uint256,uint256)": FunctionFragment;
    "createSellOrder(address,uint256,uint256,uint256)": FunctionFragment;
    "executeSellOrder(address,address,uint256,uint256,uint256,address)": FunctionFragment;
    "getBuyOrder(address,address,uint256)": FunctionFragment;
    "getRoyaltyPayoutAddress(address)": FunctionFragment;
    "getRoyaltyPayoutRate(address)": FunctionFragment;
    "getSellOrder(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellOrderExists(address,address,uint256)": FunctionFragment;
    "setRoyalty(address,address,uint256)": FunctionFragment;
    "setSystemFeePerMille(uint256)": FunctionFragment;
    "setSystemFeeWallet(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateBuyOrder(address,address,uint256,uint256,uint256)": FunctionFragment;
    "updateSellOrder(address,uint256,uint256,uint256)": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__ERC721Exchange_init",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptBuyOrder",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyOrderExists",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBuyOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSellOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBuyOrder",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSellOrder",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSellOrder",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyOrder",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyPayoutAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyPayoutRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellOrder",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellOrderExists",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalty",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemFeePerMille",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemFeeWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBuyOrder",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSellOrder",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "__ERC721Exchange_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyOrderExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyPayoutAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyPayoutRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellOrderExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoyalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSystemFeePerMille",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSystemFeeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BuyOrderAccepted(address,address,address,uint256,uint256)": EventFragment;
    "BuyOrderBooked(address,address,address,uint256,uint256,uint256)": EventFragment;
    "BuyOrderCanceled(address,address,uint256)": EventFragment;
    "BuyOrderUpdated(address,address,address,uint256,uint256,uint256)": EventFragment;
    "CollectionRoyaltyFeeAmountUpdated(address,address,uint256,uint256)": EventFragment;
    "CollectionRoyaltyPayoutAddressUpdated(address,address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SellOrderBooked(address,address,uint256,uint256,uint256)": EventFragment;
    "SellOrderCanceled(address,address,uint256)": EventFragment;
    "SellOrderFufilled(address,address,address,uint256,uint256)": EventFragment;
    "SellOrderUpdated(address,address,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyOrderAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyOrderBooked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyOrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyOrderUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollectionRoyaltyFeeAmountUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollectionRoyaltyPayoutAddressUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellOrderBooked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellOrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellOrderFufilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellOrderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type BuyOrderAcceptedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    buyer: string;
    seller: string;
    tokenContractAddress: string;
    tokenId: BigNumber;
    offer: BigNumber;
  }
>;

export type BuyOrderBookedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber] & {
    buyer: string;
    owner: string;
    tokenContractAddress: string;
    tokenId: BigNumber;
    expiration: BigNumber;
    offer: BigNumber;
  }
>;

export type BuyOrderCanceledEvent = TypedEvent<
  [string, string, BigNumber] & {
    buyer: string;
    tokenContractAddress: string;
    tokenId: BigNumber;
  }
>;

export type BuyOrderUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber] & {
    buyer: string;
    owner: string;
    tokenContractAddress: string;
    tokenId: BigNumber;
    expiration: BigNumber;
    offer: BigNumber;
  }
>;

export type CollectionRoyaltyFeeAmountUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    tokenContractAddress: string;
    executor: string;
    newRoyaltiesAmount: BigNumber;
    oldRoyaltiesAmount: BigNumber;
  }
>;

export type CollectionRoyaltyPayoutAddressUpdatedEvent = TypedEvent<
  [string, string, string, string] & {
    tokenContractAddress: string;
    executor: string;
    newPayoutAddress: string;
    oldPayoutAddress: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type SellOrderBookedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    seller: string;
    tokenContractAddress: string;
    tokenId: BigNumber;
    expiration: BigNumber;
    price: BigNumber;
  }
>;

export type SellOrderCanceledEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    tokenContractAddress: string;
    tokenId: BigNumber;
  }
>;

export type SellOrderFufilledEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    seller: string;
    recipient: string;
    tokenContractAddress: string;
    tokenId: BigNumber;
    price: BigNumber;
  }
>;

export type SellOrderUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    seller: string;
    tokenContractAddress: string;
    tokenId: BigNumber;
    expiration: BigNumber;
    price: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class ERC721ExchangeUpgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC721ExchangeUpgradeableInterface;

  functions: {
    __ERC721Exchange_init(
      __maxRoyaltyPerMille: BigNumberish,
      __systemFeePerMille: BigNumberish,
      __wethAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptBuyOrder(
      bidder: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      offer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyOrderExists(
      buyer: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancelBuyOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSellOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBuyOrder(
      owner: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      offer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSellOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSellOrder(
      seller: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      price: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBuyOrder(
      buyer: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, BigNumber, BigNumber, BigNumber] & {
          buyer: string;
          owner: string;
          tokenContractAddress: string;
          tokenId: BigNumber;
          expiration: BigNumber;
          offer: BigNumber;
        }
      ]
    >;

    getRoyaltyPayoutAddress(
      _tokenContractAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoyaltyPayoutRate(
      _tokenContractAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellOrder(
      seller: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber, BigNumber] & {
          seller: string;
          tokenContractAddress: string;
          tokenId: BigNumber;
          expiration: BigNumber;
          price: BigNumber;
        }
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellOrderExists(
      seller: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setRoyalty(
      _tokenContractAddress: string,
      _payoutAddress: string,
      _payoutPerMille: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSystemFeePerMille(
      _newSystemFeePerMille: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSystemFeeWallet(
      _newSystemFeeWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBuyOrder(
      owner: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      offer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSellOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __ERC721Exchange_init(
    __maxRoyaltyPerMille: BigNumberish,
    __systemFeePerMille: BigNumberish,
    __wethAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptBuyOrder(
    bidder: string,
    tokenContractAddress: string,
    tokenId: BigNumberish,
    expiration: BigNumberish,
    offer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyOrderExists(
    buyer: string,
    tokenContractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancelBuyOrder(
    tokenContractAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSellOrder(
    tokenContractAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBuyOrder(
    owner: string,
    tokenContractAddress: string,
    tokenId: BigNumberish,
    expiration: BigNumberish,
    offer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSellOrder(
    tokenContractAddress: string,
    tokenId: BigNumberish,
    expiration: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSellOrder(
    seller: string,
    tokenContractAddress: string,
    tokenId: BigNumberish,
    expiration: BigNumberish,
    price: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBuyOrder(
    buyer: string,
    tokenContractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber] & {
      buyer: string;
      owner: string;
      tokenContractAddress: string;
      tokenId: BigNumber;
      expiration: BigNumber;
      offer: BigNumber;
    }
  >;

  getRoyaltyPayoutAddress(
    _tokenContractAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoyaltyPayoutRate(
    _tokenContractAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellOrder(
    seller: string,
    tokenContractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber] & {
      seller: string;
      tokenContractAddress: string;
      tokenId: BigNumber;
      expiration: BigNumber;
      price: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellOrderExists(
    seller: string,
    tokenContractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setRoyalty(
    _tokenContractAddress: string,
    _payoutAddress: string,
    _payoutPerMille: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSystemFeePerMille(
    _newSystemFeePerMille: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSystemFeeWallet(
    _newSystemFeeWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBuyOrder(
    owner: string,
    tokenContractAddress: string,
    tokenId: BigNumberish,
    expiration: BigNumberish,
    offer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSellOrder(
    tokenContractAddress: string,
    tokenId: BigNumberish,
    expiration: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __ERC721Exchange_init(
      __maxRoyaltyPerMille: BigNumberish,
      __systemFeePerMille: BigNumberish,
      __wethAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptBuyOrder(
      bidder: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      offer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyOrderExists(
      buyer: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelBuyOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSellOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createBuyOrder(
      owner: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      offer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createSellOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeSellOrder(
      seller: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      price: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getBuyOrder(
      buyer: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        buyer: string;
        owner: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        expiration: BigNumber;
        offer: BigNumber;
      }
    >;

    getRoyaltyPayoutAddress(
      _tokenContractAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoyaltyPayoutRate(
      _tokenContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellOrder(
      seller: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        seller: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        expiration: BigNumber;
        price: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellOrderExists(
      seller: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setRoyalty(
      _tokenContractAddress: string,
      _payoutAddress: string,
      _payoutPerMille: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSystemFeePerMille(
      _newSystemFeePerMille: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSystemFeeWallet(
      _newSystemFeeWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateBuyOrder(
      owner: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      offer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSellOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BuyOrderAccepted(address,address,address,uint256,uint256)"(
      buyer?: null,
      seller?: string | null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      offer?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        buyer: string;
        seller: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        offer: BigNumber;
      }
    >;

    BuyOrderAccepted(
      buyer?: null,
      seller?: string | null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      offer?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        buyer: string;
        seller: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        offer: BigNumber;
      }
    >;

    "BuyOrderBooked(address,address,address,uint256,uint256,uint256)"(
      buyer?: string | null,
      owner?: null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      expiration?: null,
      offer?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        owner: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        expiration: BigNumber;
        offer: BigNumber;
      }
    >;

    BuyOrderBooked(
      buyer?: string | null,
      owner?: null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      expiration?: null,
      offer?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        owner: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        expiration: BigNumber;
        offer: BigNumber;
      }
    >;

    "BuyOrderCanceled(address,address,uint256)"(
      buyer?: string | null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { buyer: string; tokenContractAddress: string; tokenId: BigNumber }
    >;

    BuyOrderCanceled(
      buyer?: string | null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { buyer: string; tokenContractAddress: string; tokenId: BigNumber }
    >;

    "BuyOrderUpdated(address,address,address,uint256,uint256,uint256)"(
      buyer?: string | null,
      owner?: null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      expiration?: null,
      offer?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        owner: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        expiration: BigNumber;
        offer: BigNumber;
      }
    >;

    BuyOrderUpdated(
      buyer?: string | null,
      owner?: null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      expiration?: null,
      offer?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        owner: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        expiration: BigNumber;
        offer: BigNumber;
      }
    >;

    "CollectionRoyaltyFeeAmountUpdated(address,address,uint256,uint256)"(
      tokenContractAddress?: string | null,
      executor?: string | null,
      newRoyaltiesAmount?: null,
      oldRoyaltiesAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        tokenContractAddress: string;
        executor: string;
        newRoyaltiesAmount: BigNumber;
        oldRoyaltiesAmount: BigNumber;
      }
    >;

    CollectionRoyaltyFeeAmountUpdated(
      tokenContractAddress?: string | null,
      executor?: string | null,
      newRoyaltiesAmount?: null,
      oldRoyaltiesAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        tokenContractAddress: string;
        executor: string;
        newRoyaltiesAmount: BigNumber;
        oldRoyaltiesAmount: BigNumber;
      }
    >;

    "CollectionRoyaltyPayoutAddressUpdated(address,address,address,address)"(
      tokenContractAddress?: string | null,
      executor?: string | null,
      newPayoutAddress?: string | null,
      oldPayoutAddress?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        tokenContractAddress: string;
        executor: string;
        newPayoutAddress: string;
        oldPayoutAddress: string;
      }
    >;

    CollectionRoyaltyPayoutAddressUpdated(
      tokenContractAddress?: string | null,
      executor?: string | null,
      newPayoutAddress?: string | null,
      oldPayoutAddress?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        tokenContractAddress: string;
        executor: string;
        newPayoutAddress: string;
        oldPayoutAddress: string;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "SellOrderBooked(address,address,uint256,uint256,uint256)"(
      seller?: string | null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      expiration?: null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        seller: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        expiration: BigNumber;
        price: BigNumber;
      }
    >;

    SellOrderBooked(
      seller?: string | null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      expiration?: null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        seller: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        expiration: BigNumber;
        price: BigNumber;
      }
    >;

    "SellOrderCanceled(address,address,uint256)"(
      seller?: string | null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; tokenContractAddress: string; tokenId: BigNumber }
    >;

    SellOrderCanceled(
      seller?: string | null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; tokenContractAddress: string; tokenId: BigNumber }
    >;

    "SellOrderFufilled(address,address,address,uint256,uint256)"(
      seller?: string | null,
      recipient?: null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        seller: string;
        recipient: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        price: BigNumber;
      }
    >;

    SellOrderFufilled(
      seller?: string | null,
      recipient?: null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      price?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        seller: string;
        recipient: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        price: BigNumber;
      }
    >;

    "SellOrderUpdated(address,address,uint256,uint256,uint256)"(
      seller?: string | null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      expiration?: null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        seller: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        expiration: BigNumber;
        price: BigNumber;
      }
    >;

    SellOrderUpdated(
      seller?: string | null,
      tokenContractAddress?: string | null,
      tokenId?: BigNumberish | null,
      expiration?: null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        seller: string;
        tokenContractAddress: string;
        tokenId: BigNumber;
        expiration: BigNumber;
        price: BigNumber;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    __ERC721Exchange_init(
      __maxRoyaltyPerMille: BigNumberish,
      __systemFeePerMille: BigNumberish,
      __wethAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptBuyOrder(
      bidder: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      offer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyOrderExists(
      buyer: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelBuyOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSellOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBuyOrder(
      owner: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      offer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSellOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSellOrder(
      seller: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      price: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBuyOrder(
      buyer: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyPayoutAddress(
      _tokenContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyPayoutRate(
      _tokenContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellOrder(
      seller: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellOrderExists(
      seller: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRoyalty(
      _tokenContractAddress: string,
      _payoutAddress: string,
      _payoutPerMille: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSystemFeePerMille(
      _newSystemFeePerMille: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSystemFeeWallet(
      _newSystemFeeWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBuyOrder(
      owner: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      offer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSellOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __ERC721Exchange_init(
      __maxRoyaltyPerMille: BigNumberish,
      __systemFeePerMille: BigNumberish,
      __wethAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptBuyOrder(
      bidder: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      offer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyOrderExists(
      buyer: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelBuyOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSellOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBuyOrder(
      owner: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      offer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSellOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSellOrder(
      seller: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      price: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBuyOrder(
      buyer: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyPayoutAddress(
      _tokenContractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyPayoutRate(
      _tokenContractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellOrder(
      seller: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellOrderExists(
      seller: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRoyalty(
      _tokenContractAddress: string,
      _payoutAddress: string,
      _payoutPerMille: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSystemFeePerMille(
      _newSystemFeePerMille: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSystemFeeWallet(
      _newSystemFeeWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBuyOrder(
      owner: string,
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      offer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSellOrder(
      tokenContractAddress: string,
      tokenId: BigNumberish,
      expiration: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
